package koing.kosta180.service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import koing.kosta180.domain.CategoryScoreVO;
import koing.kosta180.domain.MemberVO;
import koing.kosta180.domain.StoreVO;
import koing.kosta180.persistence.RecommendDAO;

@Service
public class RecommendServiceImpl implements RecommendService {

	@Inject
	private RecommendDAO dao;

	private static final Logger logger = LoggerFactory.getLogger(RecommendServiceImpl.class);

	@Override
	public List<StoreVO> mostLikeStoreList() throws Exception {
		List<StoreVO> mostLikeStoreList = dao.mostLikeStoreList();
		return mostLikeStoreList;
	}

	@Override
	public StoreVO preferredStore(MemberVO member) throws Exception {
		// TODO Auto-generated method stub
		logger.info("preferredStore........................");
		StoreVO preferredStore = new StoreVO();
		HashMap<String, Object> map = new HashMap<String, Object>();
		String id = member.getId();
		
		// 1순위 예약횟수
		List<StoreVO> mostReserveStore = dao.mostReserveStore(member);
		
		if (isSingle(mostReserveStore)) {
			
			preferredStore = mostReserveStore.get(0);
			
		}else {
			map.put("id", id);
			map.put("mostReserveStore", mostReserveStore);
			
			//2순위 평점
			List<StoreVO> highScoreStore =  dao.highScoreStore(map);
			
			if(highScoreStore.isEmpty()){
				highScoreStore = mostReserveStore;
			}
			
			if(isSingle(highScoreStore)){
				preferredStore = highScoreStore.get(0);
			}else{
				map.put("highScoreStore",highScoreStore);
				
				//3순위 좋아요
				List<StoreVO> likeItStore = dao.likeItStore(map);
				
				if(likeItStore.isEmpty()){
					likeItStore = highScoreStore;
				}
				if(isSingle(likeItStore)){
					preferredStore = likeItStore.get(0);
				}else{
					
					//회원가입시 선택한 상점의 id가져오는 쿼리
					String joinStoreId = dao.joinStoreId(id);
					
					//위의 String 상점id를 List로 변환
					List<String> joinStoreList = Arrays.asList(joinStoreId.split(","));
					
					//회원가입시 선택한 상점의 카테고리 리스트(joinStoreCategoryList)
					List<CategoryScoreVO> joinStoreCategoryList = dao.categoryScore(joinStoreList);
						
				
					//3순위까지 걸러진 상점의 카테고리 리스트(likeItStoreCategoryList)
					List<String> likeItStoreList = new ArrayList<>();
					for(int i=0; i<likeItStore.size();i++){
						likeItStoreList.add(i,likeItStore.get(i).getS_no());
					}
					List<CategoryScoreVO> likeItStoreCategoryList = dao.categoryScore(likeItStoreList);
					
					double arr[][] = new double [likeItStoreCategoryList.size()][joinStoreCategoryList.size()];
					
					
					for(int i=0; i<likeItStoreCategoryList.size(); i++){
						for(int j=0; j<joinStoreCategoryList.size();j++){
							arr[i][j] = correlation(joinStoreCategoryList.get(i),likeItStoreCategoryList.get(j));
						}
					}
					
					for(int i=0; i<likeItStoreCategoryList.size();i++){
						for(int j=0; j<joinStoreCategoryList.size();j++){
							arr[j][i]
						}
					}
					
					
					
				}
			}
		}
		return preferredStore;
	}

	//리스트에 1개의 StoreVO객체가 있는지 확인하는 메소드
	public boolean isSingle(List<StoreVO> list){
		if(list.size() == 1){
			return true;
		}else{
			return false;
		}
	}
	
	//2개의 StoreVO객체의 유사도를 구하는 메소드
	public double correlation(CategoryScoreVO joinCategory, CategoryScoreVO likeCategory){
		
		List<Integer> minus = new ArrayList<>();
		
		//주류
		minus.add( joinCategory.getAlc_beer() - likeCategory.getAlc_beer());
		minus.add(joinCategory.getAlc_cocktail()-likeCategory.getAlc_cocktail());
		minus.add(joinCategory.getAlc_etc()-likeCategory.getAlc_etc());
		minus.add(joinCategory.getAlc_ricewine()-likeCategory.getAlc_ricewine());
		minus.add(joinCategory.getAlc_soju()-likeCategory.getAlc_soju());
		minus.add(joinCategory.getAlc_vodka()-likeCategory.getAlc_vodka());
		minus.add(joinCategory.getAlc_wine()-likeCategory.getAlc_wine());
		
		//아시아식
		minus.add(joinCategory.getAsia_etc()-likeCategory.getAsia_etc());
		minus.add(joinCategory.getAsia_india()-likeCategory.getAsia_india());
		minus.add(joinCategory.getAsia_thai()-likeCategory.getAsia_thai());
		minus.add(joinCategory.getAsia_vietnam()-likeCategory.getAsia_vietnam());
		
		//중식
		minus.add(joinCategory.getChn_etc()-likeCategory.getChn_etc());
		minus.add(joinCategory.getChn_fry()-likeCategory.getChn_fry());
		minus.add(joinCategory.getChn_meat()-likeCategory.getChn_meat());
		minus.add(joinCategory.getChn_noodle()-likeCategory.getChn_noodle());
		minus.add(joinCategory.getChn_skewer()-likeCategory.getChn_skewer());
		minus.add(joinCategory.getChn_snack()-likeCategory.getChn_snack());
		minus.add(joinCategory.getChn_soup()-likeCategory.getChn_soup());
		
		//일식
		minus.add(joinCategory.getJap_etc()-likeCategory.getJap_etc());
		minus.add(joinCategory.getJap_meat()-likeCategory.getJap_meat());
		minus.add(joinCategory.getJap_noodle()-likeCategory.getJap_noodle());
		minus.add(joinCategory.getJap_rice()-likeCategory.getJap_rice());
		minus.add(joinCategory.getJap_snack()-likeCategory.getJap_snack());
		minus.add(joinCategory.getJap_soup()-likeCategory.getJap_soup());
		minus.add(joinCategory.getJap_sushi()-likeCategory.getJap_sushi());
		
		//한식
		minus.add(joinCategory.getKor_etc()-likeCategory.getKor_etc());
		minus.add(joinCategory.getKor_jjigae()-likeCategory.getKor_jjigae());
		minus.add(joinCategory.getKor_jjim()-likeCategory.getKor_jjim());
		minus.add(joinCategory.getKor_meat()-likeCategory.getKor_meat());
		minus.add(joinCategory.getKor_noodle()-likeCategory.getKor_noodle());
		minus.add(joinCategory.getKor_snack()-likeCategory.getKor_snack());
		minus.add(joinCategory.getKor_soup()-likeCategory.getKor_soup());
		
		//양식
		minus.add(joinCategory.getWes_etc()-likeCategory.getWes_etc());
		minus.add(joinCategory.getWes_meat()-likeCategory.getWes_meat());
		minus.add(joinCategory.getWes_noodle()-likeCategory.getWes_noodle());
		minus.add(joinCategory.getWes_pizza()-likeCategory.getWes_pizza());
		minus.add(joinCategory.getWes_roast()-likeCategory.getWes_roast());
		minus.add(joinCategory.getWes_skewer()-likeCategory.getWes_skewer());
		minus.add(joinCategory.getWes_snack()-likeCategory.getWes_snack());
		
		
		//각각의 차이를 제곱
		List<Double> pow = new ArrayList<Double>();
		for(int i=0; i<minus.size(); i++){
			pow.add(i, Math.pow(minus.get(i), 2));
		}
		
		double result = 0;
		
		//차이의 제곱의 합
		for(int i=0; i<pow.size();i++){
			result += pow.get(i);
		}
		
		//제곱의 합의 루트 + 1 의 역수 => 유사도
		result =1 /(1 + Math.sqrt(result));
		
		return result;
	}
	
}
